import pandas as pd
from goatools.base import download_go_basic_obo, dnld_gaf
from goatools.anno import gaf_reader
from goatools.obo_parser import GODag
from goatools.goea.go_enrichment_ns import GOEnrichmentStudyNS
import mygene as mg
import os


def download_basic_go_obo():
    """Wrapper function for GOATOOLS method to download a basic obo file."""
    download_go_basic_obo()


def download_gaf(species="goa_human"):
    """Wrapper function for GOATOOLS method to download a GAF file
    :param species: String of which species' GAF file to download.
    :return The specified GAF file.
    """
    dnld_gaf(species)


def helper_method_create_gaf_df(gaf_associations):
    """Helper method for the GO enrichment analysis functions."""
    return pd.DataFrame(gaf_associations)


def go_enrichment_analysis_single_module(genes_of_interest, path_to_go_obo_file, path_to_gaf_file, save_tsv_file_name,
                                         all_genes_in_network=None, enrichment_correction_test=None,
                                         gaf_db_id_col='DB_ID', gaf_db_symbol_col='DB_Symbol'):
    """
    GO enrichment analysis of a single set of genes.
    :param genes_of_interest: List of the genes of interest should be in the form of gene symbols e.g. ['BRACA1']
    :param path_to_go_obo_file: String path to the downloaded basic obo file
    :param path_to_gaf_file: String path to the downloaded GAF file
    :param save_tsv_file_name: String file name ot save the results should end with the '.tsv' extension
    :param all_genes_in_network: List of all genes present in the larger network searched, the method will compare the genes of interest to all_genes_in_network. If left as None it will default to all genes present in GAF
    :param enrichment_correction_test: List of correction tests to use to see if GO terms are significant. For all possible tests see GOATOOLS 'https://www.nature.com/articles/s41598-018-28948-z' documentation. Defaults to uncorrected
    :param gaf_db_id_col: ID column within the database
    :param gaf_db_symbol_col: Gene symbol column within the database
    :return: A tsv file of the GO enrichment results
    """
    godag = GODag(path_to_go_obo_file)
    gaf = gaf_reader.GafReader(path_to_gaf_file)
    gaf_assc = gaf.get_ns2assc()

    gaf_df = helper_method_create_gaf_df(gaf.associations)

    if all_genes_in_network is None:
        pop_genes = gaf_df[[gaf_db_id_col]].dropna()
        pop_genes = pop_genes[gaf_db_id_col].tolist()

    else:
        gaf_df = gaf_df.loc[gaf_df[gaf_db_symbol_col].isin(all_genes_in_network)]
        pop_genes = gaf_df[[gaf_db_id_col]].dropna()
        pop_genes = pop_genes[gaf_db_id_col].tolist()

    enrichment_obj = GOEnrichmentStudyNS(pop_genes, gaf_assc, godag, methods=enrichment_correction_test)

    gaf_df = gaf_df.loc[gaf_df[gaf_db_symbol_col].isin(genes_of_interest)]
    gene_vals = gaf_df[[gaf_db_id_col]].dropna()
    gene_vals = gene_vals[gaf_db_id_col].tolist()

    results = enrichment_obj.run_study(gene_vals)
    results = [r for r in results if r.study_count > 0]
    enrichment_obj.wr_tsv(save_tsv_file_name, results)


def go_enrichment_analysis_modules(path_to_go_obo_file, path_to_gaf_file, output_directory,
                                        path_to_modules_file=None, modules=None,
                                        all_genes_in_network=None, enrichment_correction_test=None,
                                        gaf_db_id_col='DB_ID', gaf_db_symbol_col='DB_Symbol'):

    """
    GO enrichment analysis using the 'module.out' file generated by run_domino method
    :param path_to_go_obo_file: String path to the downloaded basic obo file
    :param path_to_gaf_file: String path to the downloaded GAF file
    :param output_directory: String path to the output directory where GOE analysis results are stored
    :param path_to_modules_file: String path to the 'modules.out' file. Default None when no file has been generated
    :param modules: List of modules (list of lists). Default None if passing modules as file
    :param all_genes_in_network: List of all genes present in the larger network searched, will compare the module genes to all_genes_in_network. If left as None it will default to all genes present in GAF
    :param enrichment_correction_test: List of correction tests to use to see if GO terms are significant. For all possible tests see GOATOOLS 'https://www.nature.com/articles/s41598-018-28948-z' documentation. Defaults to uncorrected
    :param gaf_db_id_col: ID column within the database
    :param gaf_db_symbol_col:  Gene symbol column within the database
    :return: Multiple '.tsv' files one per module passed
    """

    godag = GODag(path_to_go_obo_file)
    gaf = gaf_reader.GafReader(path_to_gaf_file)
    gaf_assc = gaf.get_ns2assc()

    gaf_df = helper_method_create_gaf_df(gaf.associations)

    if all_genes_in_network is None:
        pop_genes = gaf_df[[gaf_db_id_col]].dropna()
        pop_genes = pop_genes[gaf_db_id_col].tolist()

    else:
        gaf_df = gaf_df.loc[gaf_df[gaf_db_symbol_col].isin(all_genes_in_network)]
        print(f'Number of associations in GAF file related to all nodes: {len(gaf_df)} ')
        pop_genes = gaf_df[[gaf_db_id_col]].dropna()
        pop_genes = pop_genes[gaf_db_id_col].tolist()

    enrichment_obj = GOEnrichmentStudyNS(pop_genes, gaf_assc, godag, methods=enrichment_correction_test)

    if not os.path.exists(output_directory):
        os.mkdir(output_directory)

    count = 0

    if path_to_modules_file is not None:
        with open(path_to_modules_file, 'r') as f:
            mods = f.read().splitlines()

        for i in mods:
            i = i.split('[')[-1]
            i = i.split(']')[0]
            i = i.split(', ')
            print(f'Module {count}')

            mod_gaf = gaf_df.loc[gaf_df[gaf_db_symbol_col].isin(i)]
            study_genes = mod_gaf[gaf_db_id_col].tolist()
            results = enrichment_obj.run_study(study_genes)
            results = [r for r in results if r.study_count > 0]

            out_file_name = "".join(['module_', str(count), '.tsv'])
            out_file_name = os.path.join(output_directory, out_file_name)
            enrichment_obj.wr_tsv(out_file_name, results)
            count += 1

    if modules is not None:
        for i in modules:
            print(f'Module {count}')

            mod_gaf = gaf_df.loc[gaf_df[gaf_db_symbol_col].isin(i)]
            study_genes = mod_gaf[gaf_db_id_col].tolist()
            results = enrichment_obj.run_study(study_genes)
            results = [r for r in results if r.study_count > 0]

            out_file_name = "".join(['module_', str(count), '.tsv'])
            out_file_name = os.path.join(output_directory, out_file_name)
            enrichment_obj.wr_tsv(out_file_name, results)
            count += 1


def mygene_gene_id_conversion(list_of_genes, id_type, output_types=['symbol', 'ensembl.gene'], species='human',
                              save_csv_file_name=None):

    """
    Wrapper function for the MyGene api to obtain multiple formats of various gene identifiers
    :param list_of_genes: List of the genes to convert
    :param id_type: String of the format of the genes supplied e.g. 'symbol' or 'ensembl.gene'
    :param output_types: List of the output formats e.g. ['symbol', 'ensembl.gene']. Full list of formats available from MyGene 'https://mygene.info/
    :param species: String species of the supplied genes. Default 'human'
    :param save_csv_file_name: File name to save the converted formats dataframe should end with the extension '.csv'
    :return: A dataframe of the conversions acquired from MyGene
    """

    mygene_searcher = mg.MyGeneInfo()
    out = mygene_searcher.querymany(list_of_genes, scopes=id_type, fields=output_types, species=species,
                                    df_index=False, as_dataframe=True)

    if save_csv_file_name is not None:
        if not save_csv_file_name.endswith('.csv'):
            raise Exception(f"save_csv_file_name should end with the '.csv' extension \nnot {save_csv_file_name}")

        out.to_csv(save_csv_file_name, index=False)

    return out


def all_nodes_from_df(df, list_of_cols=None, save_txt_file=None, remove_duplicates=True):
    """
    Helper function to obtain all nodes from a dataframe
    :param df: Dataframe containing the nodes
    :param list_of_cols: List of specific columns to get nodes from. Defaults to None and uses all columns in DF
    :param save_txt_file: String name of txt file to save the nodes. Defaults to None and doesn't save the nodes
    :param remove_duplicates: Boolean whether to drop duplicates within the nodes list. Defaults to True
    :return: List of nodes present in the selected columns of the dataframe
    """
    if list_of_cols is not None:
        df = df[list_of_cols]

    li = df.values.tolist()
    li = [x for sub in li for x in sub]

    if remove_duplicates:
        li = list(set(li))

    if save_txt_file is not None:
        li = [str(x) for x in li]
        out_string = '\n'.join(li)
        with open(save_txt_file, 'w') as f:
            f.write(out_string)

    return li


