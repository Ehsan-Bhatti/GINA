import subprocess


def create_files_for_domino_input(network_df=None, network_sif_file_name=None, network_node_1_col=None,
                                  network_node_2_col=None, network_interaction_type='ppi', nodes_of_interest_list=None,
                                  nodes_of_interest_txt_file_name=None):
    """
    Creates files for the DOMINO algorithm. Preprocesses the network and active genes files
    :param network_df: Dataframe of the network being searched in DOMINO
    :param network_sif_file_name: File name to save the network should end with the '.sif' extension
    :param network_node_1_col: Column containing the first node within edges in the network
    :param network_node_2_col: Column containing the second node within edges in the network
    :param network_interaction_type: String indicating the type of interaction between nodes. Defaults to 'ppi' aka protein-protein interaction
    :param nodes_of_interest_list: List of the nodes of interest aka active genes. Most likely the differentially expressed genes
    :param nodes_of_interest_txt_file_name: File name to save the nodes of interest should end with the '.txt' extension
    :return: A tab separated network sif file and a txt file containing a list of nodes of interest
    """
    if network_df is not None:
        network_df[network_interaction_type] = network_interaction_type
        network_df = network_df[[network_node_1_col, network_interaction_type, network_node_2_col]]

        if not network_sif_file_name.endswith('.sif'):
            raise Exception(f'network file name ({network_sif_file_name}) needs to end with the extension ".sif"')

        network_df.to_csv(network_sif_file_name, sep='\t', index=False)

    if nodes_of_interest_list is not None:
        nodes_of_interest_list = list(set(nodes_of_interest_list))
        nodes_string = "\n".join(nodes_of_interest_list)

        if nodes_of_interest_txt_file_name.endswith('.txt') == False:
            raise Exception(
                f'Nodes of interest file name ({nodes_of_interest_txt_file_name} needs to end with the extension ".txt")')

        with open(nodes_of_interest_txt_file_name, 'w') as f:
            f.write(nodes_string)


def create_slices_file(network_sif_file_path, output_file_path):
    """
    Create a network slices file for DOMINO. Preprocessing step for DOMINO requires the network file
    :param network_sif_file_path: Path to the sif network file as generated by the create_files_for_domino_input method
    :param output_file_path: File name for the slices file should end with the '.txt' extension
    :return: A slices txt file that is a required input for the DOMINO algorithm
    """
    if not output_file_path.endswith('.txt'):
        raise Exception(f"output_file_path needs to end with the extension '.txt' \nnot: {output_file_path}")

    subprocess.call(['slicer', '-n', network_sif_file_path, '-o', output_file_path])


def run_domino(network_sif_file_path, slices_file_path, active_genes_file_path, output_folder_path,
               use_cache=None, parallelisation=None, visualisation=False,
               slices_threshold=None, module_threshold=None):
    """
    Run the DOMINO algorithm using a network file, slices file and active genes file
    :param network_sif_file_path: Path to sif network file as created by the create_files_for_domino_input method
    :param slices_file_path: Path to the txt slices file as created by the create_slices_file
    :param active_genes_file_path: Path to the txt nodes of interest file as created by the create_files_for_domino_input method
    :param output_folder_path: Specify the directory where the outputs of DOMINO should be saved
    :param use_cache: Boolean reuse files generated from previous runs. Note these are not the same as the input files required. If left as None it defaults to True
    :param parallelisation: Number of threads for DOMINO to employ. If left as None it defaults as 1
    :param visualisation: Boolean generate a html visualisation file of each module found. Default is False to save time
    :param slices_threshold: Change the threshold for a slice to be considered relevant if None is provided use the default from DOMINO
    :param module_threshold: Change the threshold of a putative module to be considered relevant if None is provided use the default from DOMINO
    :return: The output of the DOMINO algorithm to the specified location
    """
    dom_inp = ['domino', '-a', active_genes_file_path, '-n',
               network_sif_file_path, '-s', slices_file_path]

    if use_cache is not None:
        dom_inp.extend(['-c', str(use_cache)])

    if parallelisation is not None:
        dom_inp.extend(['-p', str(parallelisation)])

    if visualisation is not None:
        dom_inp.extend(['-v', str(visualisation)])

    if slices_threshold is not None:
        dom_inp.extend(['-sth', str(slices_threshold)])

    if module_threshold is not None:
        dom_inp.extend(['-mth', str(module_threshold)])

    dom_inp.extend(['-o', output_folder_path])

    subprocess.call(dom_inp)


